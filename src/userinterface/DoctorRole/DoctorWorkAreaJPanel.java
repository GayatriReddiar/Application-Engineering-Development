/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.HeadDoctorOrganization;
import Business.Organization.NGOAdminOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HeadDoctorApprovalWorkRequest;
import Business.WorkQueue.HealthEventWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DoctorOrganization doctorOrganization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem ecosystem; 
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, DoctorOrganization organization, Enterprise enterprise, EcoSystem ecosystem) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.ecosystem = ecosystem;
        this.doctorOrganization = (DoctorOrganization)organization;
        this.enterprise = enterprise;
        populateEventRequestTable();
        populateRegistrationsTable();
    }
    
    public void populateEventRequestTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        model.setRowCount(0);
        for (Network network : ecosystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if(organization instanceof DoctorOrganization){
                        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
                            if(request instanceof HealthEventWorkRequest){
                                HealthEventWorkRequest req = (HealthEventWorkRequest) request;         
                                Object[] row = new Object[2];
                                row[0] = req;
                                row[1] = req.getNgoName();
                                model.addRow(row);
                            }
                        }
                    }
                }
            }
        }
    }
    
    public void populateRegistrationsTable(){
        DefaultTableModel model = (DefaultTableModel)eventRegistrationStatusJTable.getModel();        
        model.setRowCount(0);
        for (Network network : ecosystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if(organization instanceof HeadDoctorOrganization){
                        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
                            if(request.getSender() == userAccount){
                                HeadDoctorApprovalWorkRequest req = (HeadDoctorApprovalWorkRequest) request;
                                Object[] row = new Object[4];
                                row[0] = req;
                                row[1] = req.getWorkRequest();
                                row[2] = req.getWorkRequest().getNgoName();
                                row[3] = req.getStatus();    
                                model.addRow(row);
                            }
                        }
                    }
                }
            }
            
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshJButton2 = new javax.swing.JButton();
        refreshJButton4 = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        eventRegistrationStatusJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        viewJButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        unregisterJButton = new javax.swing.JButton();
        createPrescriptionJButton = new javax.swing.JButton();
        viewPrescriptionjButton = new javax.swing.JButton();
        requestLabjButton = new javax.swing.JButton();
        viewLabResultsjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        refreshJButton2.setText("Refresh Table");

        refreshJButton4.setText("Unregister");

        setLayout(null);

        enterpriseLabel.setFont(new java.awt.Font("Times New Roman", 3, 45)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(255, 255, 255));
        enterpriseLabel.setText("Doctor Volunteer Portal");
        add(enterpriseLabel);
        enterpriseLabel.setBounds(1020, 60, 490, 40);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 25)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("NGO Event Table");
        add(jLabel3);
        jLabel3.setBounds(1130, 200, 220, 30);

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Camp Name", "NGO"
            }
        ));
        jScrollPane2.setViewportView(workRequestJTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(1010, 240, 452, 95);

        eventRegistrationStatusJTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        eventRegistrationStatusJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Camp Name", "NGO", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(eventRegistrationStatusJTable);

        add(jScrollPane3);
        jScrollPane3.setBounds(1010, 500, 452, 92);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 25)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Event Registrations");
        add(jLabel2);
        jLabel2.setBounds(1120, 460, 240, 30);

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(1120, 350, 110, 40);

        viewJButton.setBackground(new java.awt.Color(0, 0, 0));
        viewJButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        viewJButton.setForeground(new java.awt.Color(255, 255, 255));
        viewJButton.setText("View");
        viewJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewJButtonActionPerformed(evt);
            }
        });
        add(viewJButton);
        viewJButton.setBounds(1270, 350, 110, 40);

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3);
        jButton3.setBounds(1010, 610, 210, 40);

        unregisterJButton.setBackground(new java.awt.Color(0, 0, 0));
        unregisterJButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        unregisterJButton.setForeground(new java.awt.Color(255, 255, 255));
        unregisterJButton.setText("Unregister");
        unregisterJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unregisterJButtonActionPerformed(evt);
            }
        });
        add(unregisterJButton);
        unregisterJButton.setBounds(1260, 610, 200, 40);

        createPrescriptionJButton.setBackground(new java.awt.Color(0, 0, 0));
        createPrescriptionJButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        createPrescriptionJButton.setForeground(new java.awt.Color(255, 255, 255));
        createPrescriptionJButton.setText("Create Prescription ");
        createPrescriptionJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPrescriptionJButtonActionPerformed(evt);
            }
        });
        add(createPrescriptionJButton);
        createPrescriptionJButton.setBounds(1010, 670, 210, 40);

        viewPrescriptionjButton.setBackground(new java.awt.Color(0, 0, 0));
        viewPrescriptionjButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        viewPrescriptionjButton.setForeground(new java.awt.Color(255, 255, 255));
        viewPrescriptionjButton.setText("Prescription Status");
        viewPrescriptionjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPrescriptionjButtonActionPerformed(evt);
            }
        });
        add(viewPrescriptionjButton);
        viewPrescriptionjButton.setBounds(1260, 670, 200, 40);

        requestLabjButton.setBackground(new java.awt.Color(0, 0, 0));
        requestLabjButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        requestLabjButton.setForeground(new java.awt.Color(255, 255, 255));
        requestLabjButton.setText("Request Lab");
        requestLabjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestLabjButtonActionPerformed(evt);
            }
        });
        add(requestLabjButton);
        requestLabjButton.setBounds(1010, 730, 210, 40);

        viewLabResultsjButton.setBackground(new java.awt.Color(0, 0, 0));
        viewLabResultsjButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        viewLabResultsjButton.setForeground(new java.awt.Color(255, 255, 255));
        viewLabResultsjButton.setText("View Lab Results");
        viewLabResultsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLabResultsjButtonActionPerformed(evt);
            }
        });
        add(viewLabResultsjButton);
        viewLabResultsjButton.setBounds(1260, 730, 200, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/doc1.jpg"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 1920, 1080);
    }// </editor-fold>//GEN-END:initComponents

    private void unregisterJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unregisterJButtonActionPerformed
        // TODO add your handling code here:
         int selectedRow = eventRegistrationStatusJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select row from table");
            return;
        }

        HeadDoctorApprovalWorkRequest approvalRequest = (HeadDoctorApprovalWorkRequest)eventRegistrationStatusJTable.getValueAt(selectedRow, 0);
        HealthEventWorkRequest ngoEvtReq = approvalRequest.getWorkRequest();
        
        if(!(approvalRequest.getStatus().equals("Event Cancelled"))){
        ngoEvtReq.getDoctorList().remove(userAccount.getEmp());
        if(ngoEvtReq.getDoctorWaitList().size() > 0)
        {
            Employee waitlistedEmp = ngoEvtReq.getDoctorWaitList().get(0);
            ngoEvtReq.getDoctorList().add(waitlistedEmp);
            for (Network network : ecosystem.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if(organization instanceof DoctorOrganization){
                            for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
                                if(request.getSender().getEmp()== waitlistedEmp){

                                    request.setStatus("Registered");

                                }
                            }
                        }
                    }
                }
            }
        }
        approvalRequest.setStatus("Unregistered");
        populateRegistrationsTable();
        }
        else{
            approvalRequest.setStatus("Unregistered");
            JOptionPane.showMessageDialog(null, "Unregistration successful for cancelled event!");
        }
    }//GEN-LAST:event_unregisterJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        populateEventRequestTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void viewJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select row from table"); 
            return;
        }
        HealthEventWorkRequest request = (HealthEventWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        DocEventRegistrationJPanel doctorEventRegistrationJPanel = new DocEventRegistrationJPanel(userProcessContainer, request, userAccount, doctorOrganization, ecosystem);
        userProcessContainer.add("DocEventRegistrationJPanel", doctorEventRegistrationJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewJButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        populateRegistrationsTable();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void createPrescriptionJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPrescriptionJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = eventRegistrationStatusJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select row from table");
            return;
        }

        HeadDoctorApprovalWorkRequest request = (HeadDoctorApprovalWorkRequest)eventRegistrationStatusJTable.getValueAt(selectedRow, 0);
        HealthEventWorkRequest ngoEvtReq = request.getWorkRequest();
        
        if(!(request.getStatus().equals("Event Cancelled"))){
        if(request.getStatus().equals("Registered")){
            DoctorPrescriptionJPanel presCreationJPanel = new DoctorPrescriptionJPanel(userProcessContainer, ngoEvtReq, doctorOrganization, enterprise, ecosystem, userAccount);
            userProcessContainer.add("presCreationJPanel", presCreationJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
                //request.setStatus("Processing");
        }
        else{
            JOptionPane.showMessageDialog(null, "Event is cancelled, cannot create prescription!");
        }
    }//GEN-LAST:event_createPrescriptionJButtonActionPerformed

    private void viewPrescriptionjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPrescriptionjButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = eventRegistrationStatusJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select row from table");
            return;
        }

        HeadDoctorApprovalWorkRequest request = (HeadDoctorApprovalWorkRequest)eventRegistrationStatusJTable.getValueAt(selectedRow, 0);
        HealthEventWorkRequest ngoEvtReq = request.getWorkRequest();
        
        if(!(request.getStatus().equals("Event Cancelled"))){
        if(request.getStatus().equals("Registered")){
            ViewPrescriptionsJPanel viewPrescriptionsJPanel = new ViewPrescriptionsJPanel(userProcessContainer, ngoEvtReq, doctorOrganization, enterprise, ecosystem);
            userProcessContainer.add("ViewPrescriptionsJPanel", viewPrescriptionsJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
                //request.setStatus("Processing");
        }
        else{
            JOptionPane.showMessageDialog(null, "Event is cancelled, cannot view prescription!");
        }
    }//GEN-LAST:event_viewPrescriptionjButtonActionPerformed

    private void requestLabjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestLabjButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = eventRegistrationStatusJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select row from table");
            return;
        }

        HeadDoctorApprovalWorkRequest request = (HeadDoctorApprovalWorkRequest)eventRegistrationStatusJTable.getValueAt(selectedRow, 0);
        HealthEventWorkRequest ngoEvtReq = request.getWorkRequest();
        
        if(!(request.getStatus().equals("Event Cancelled"))){
        if(request.getStatus().equals("Registered")){
            DoctorLabTestJPanel doctorLabTestJPanel = new DoctorLabTestJPanel(userProcessContainer, ngoEvtReq, doctorOrganization, enterprise, ecosystem, userAccount);
            userProcessContainer.add("DoctorLabTestJPanel", doctorLabTestJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
                //request.setStatus("Processing");
        }
        else{
            JOptionPane.showMessageDialog(null, "Event is cancelled, cannot request lab!");
        }
    }//GEN-LAST:event_requestLabjButtonActionPerformed

    private void viewLabResultsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLabResultsjButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = eventRegistrationStatusJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select row from table");
            return;
        }

        HeadDoctorApprovalWorkRequest request = (HeadDoctorApprovalWorkRequest)eventRegistrationStatusJTable.getValueAt(selectedRow, 0);
        HealthEventWorkRequest ngoEvtReq = request.getWorkRequest();
        
        if(!(request.getStatus().equals("Event Cancelled"))){
        if(request.getStatus().equals("Registered")){
            ViewLabResultsJPanel viewLabResultsJPanel = new ViewLabResultsJPanel(userProcessContainer, ngoEvtReq, doctorOrganization, enterprise, ecosystem);
            userProcessContainer.add("ViewLabResultsJPanel", viewLabResultsJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
                //request.setStatus("Processing");
        }
        else{
            JOptionPane.showMessageDialog(null, "Event is cancelled, cannot view lab results!");
        }
    }//GEN-LAST:event_viewLabResultsjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createPrescriptionJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JTable eventRegistrationStatusJTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton refreshJButton2;
    private javax.swing.JButton refreshJButton4;
    private javax.swing.JButton requestLabjButton;
    private javax.swing.JButton unregisterJButton;
    private javax.swing.JButton viewJButton;
    private javax.swing.JButton viewLabResultsjButton;
    private javax.swing.JButton viewPrescriptionjButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
