/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NGOAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.NGOAdminOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HealthEventWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author reddy
 */
public class CreateHealthCampJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateHealthCampJPanel
     */
    JPanel container;
    UserAccount account;
    Enterprise enterprise;
    EcoSystem ecosystem;
    public CreateHealthCampJPanel(JPanel container, UserAccount account, Enterprise enterprise, EcoSystem ecosystem) {
        initComponents();
        this.container = container;
        this.account = account;
        this.enterprise = enterprise;
        this.ecosystem = ecosystem;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventNameTextField = new javax.swing.JTextField();
        eventDurationTextField = new javax.swing.JTextField();
        childrenCountTextField = new javax.swing.JTextField();
        doctorCountTextField = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        locationTextField = new javax.swing.JTextField();
        eventDateTextField = new com.github.lgooddatepicker.components.DatePicker();
        jLabel8 = new javax.swing.JLabel();

        setLayout(null);
        add(eventNameTextField);
        eventNameTextField.setBounds(490, 280, 258, 30);
        add(eventDurationTextField);
        eventDurationTextField.setBounds(490, 480, 258, 30);
        add(childrenCountTextField);
        childrenCountTextField.setBounds(490, 530, 258, 30);
        add(doctorCountTextField);
        doctorCountTextField.setBounds(490, 330, 258, 30);

        createButton.setBackground(new java.awt.Color(0, 0, 0));
        createButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        createButton.setForeground(new java.awt.Color(255, 255, 255));
        createButton.setText("Create Event");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        add(createButton);
        createButton.setBounds(410, 610, 160, 40);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 45)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Create Health Camp");
        add(jLabel1);
        jLabel1.setBounds(280, 150, 430, 60);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 25)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Event Name:");
        add(jLabel2);
        jLabel2.setBounds(230, 280, 170, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 25)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("No of Doctors:");
        add(jLabel3);
        jLabel3.setBounds(230, 330, 180, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 25)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Event Date:");
        add(jLabel4);
        jLabel4.setBounds(230, 380, 160, 30);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 25)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Event Duration: (Hrs)");
        add(jLabel5);
        jLabel5.setBounds(230, 480, 240, 30);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 25)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Location:");
        add(jLabel6);
        jLabel6.setBounds(230, 430, 140, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 25)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("No. of Children:");
        add(jLabel7);
        jLabel7.setBounds(230, 530, 190, 30);

        backButton.setBackground(new java.awt.Color(0, 0, 0));
        backButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("<<Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton);
        backButton.setBounds(20, 100, 110, 40);
        add(locationTextField);
        locationTextField.setBounds(490, 432, 260, 30);
        add(eventDateTextField);
        eventDateTextField.setBounds(490, 380, 290, 30);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/international-childrens-day_136441_1280x553 - Copy.jpg"))); // NOI18N
        add(jLabel8);
        jLabel8.setBounds(0, 0, 1920, 829);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
        Component[] comps = container.getComponents();
        for(Component c: comps) {
            if(c instanceof ManageHealthCampJPanel) {
                ManageHealthCampJPanel panel = (ManageHealthCampJPanel) c;
                panel.populateTable();
            }
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:
        if(doctorCountTextField.getText().equals("") || eventDateTextField.getText().equals("") || locationTextField.getText().equals("") || eventDurationTextField.getText().equals("") || eventNameTextField.getText().equals("") || childrenCountTextField.getText().equals("")) {
                JOptionPane.showMessageDialog(null,"Field(s) cannot be empty");
                return;
        }
        
        if (!eventNameTextField.getText().matches("[A-Za-z]+$")) {

            JOptionPane.showMessageDialog(null, "Please enter a valid Event Name!!!");
            return;
        }
        
        if (!doctorCountTextField.getText().matches("[0-9]+$")) {

            JOptionPane.showMessageDialog(null, "Please enter a valid number of Doctors!!!");
            return;
        }
        
                
        /*if (!locationTextField.getText().matches("[a-zA-Z0-9+]+$")) {

            JOptionPane.showMessageDialog(null, "Please enter a valid Location!!!");
            return;
        }*/
        
        if (!eventDurationTextField.getText().matches("[0-9]+$")) {

            JOptionPane.showMessageDialog(null, "Please enter a valid number of Hours!!!");
            return;
        }
        
        if (!childrenCountTextField.getText().matches("[0-9]+$")) {

            JOptionPane.showMessageDialog(null, "Please enter a valid number of children!");
            return;
        }
        
        int c = Integer.parseInt(childrenCountTextField.getText()) ;
        int d = Integer.parseInt(doctorCountTextField.getText()) ;
        if (c<d)
        {
             JOptionPane.showMessageDialog(null, "Number of children cannot be less than doctor count!!!");
            return;
        }
        

        
        try{
            String doctorCount = doctorCountTextField.getText();
            String childrenCount = childrenCountTextField.getText();
            String eventDate = eventDateTextField.getText();
            String location = locationTextField.getText();
            String eventDuration = eventDurationTextField.getText();
            String eventName = eventNameTextField.getText();

            HealthEventWorkRequest request = new HealthEventWorkRequest();
            request.setPlace(location);
            request.setDate(eventDate);
            request.setDoctorCount(doctorCount);
            request.setSender(account);
            request.setStatus("Sent To Hospitals");
            request.setNgoName(enterprise.getName());
            request.setDuration(eventDuration);
            request.setHealthEventName(eventName);
            request.setChildrenCount(childrenCount);
            //request.setEnterpriseList(enterpriseList);

            Organization org = null;
            for(Network network : ecosystem.getNetworkList()){
                for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                    for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if (organization instanceof DoctorOrganization){
                            org = organization;
                            break;
                        }
                    }
                }
            }
            if (org!=null){
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getQueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "Health checkup camp Created and hospitals notified!");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,"Enter a valid number for number of doctors!");
        }
        
        eventNameTextField.setText("");
        doctorCountTextField.setText("");
        eventDateTextField.setText("");
        locationTextField.setText("");
        eventDurationTextField.setText("");
        childrenCountTextField.setText("");
    }//GEN-LAST:event_createButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTextField childrenCountTextField;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField doctorCountTextField;
    private com.github.lgooddatepicker.components.DatePicker eventDateTextField;
    private javax.swing.JTextField eventDurationTextField;
    private javax.swing.JTextField eventNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField locationTextField;
    // End of variables declaration//GEN-END:variables
}
