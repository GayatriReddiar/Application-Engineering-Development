/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StudentCommunityRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.HeadDoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.StudentCommunityOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.EducationEventWorkRequest;
import Business.WorkQueue.HeadDoctorApprovalWorkRequest;
import Business.WorkQueue.StudentApprovalWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author reddy
 */
public class StudentCommunityWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentCommunityWorkAreaJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    Organization organization;
    EcoSystem ecoSystem;
    
    public StudentCommunityWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.ecoSystem = ecoSystem;
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        for (Network network : ecoSystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if(org instanceof StudentCommunityOrganization){
                        for(WorkRequest request : org.getWorkQueue().getWorkRequestList()){
                            if(request instanceof StudentApprovalWorkRequest & (request.getStatus().equals("Pending with Club"))){
                                StudentApprovalWorkRequest req = (StudentApprovalWorkRequest)request;
                                if(request.getReceiver() == account){
                                    Object[] row = new Object[3];
                       
                                    row[0] = req;
                                    row[1] = req.getEventRequest().getDate();
                                    row[2] = req.getEventRequest().getDuration();
   
                                    model.addRow(row);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        approvedJButton = new javax.swing.JButton();
        rejectedJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 45)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Team Volunteering Activity Request");
        add(jLabel1);
        jLabel1.setBounds(530, 140, 690, 70);

        workRequestJTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee", "Date", "Duration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(650, 280, 428, 152);

        refreshJButton.setBackground(new java.awt.Color(0, 0, 0));
        refreshJButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        refreshJButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshJButton.setText("Refresh");
        refreshJButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton);
        refreshJButton.setBounds(650, 450, 150, 40);

        approvedJButton.setBackground(new java.awt.Color(0, 0, 0));
        approvedJButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        approvedJButton.setForeground(new java.awt.Color(255, 255, 255));
        approvedJButton.setText("Approve");
        approvedJButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        approvedJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approvedJButtonActionPerformed(evt);
            }
        });
        add(approvedJButton);
        approvedJButton.setBounds(930, 450, 150, 40);

        rejectedJButton.setBackground(new java.awt.Color(0, 0, 0));
        rejectedJButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        rejectedJButton.setForeground(new java.awt.Color(255, 255, 255));
        rejectedJButton.setText("Reject");
        rejectedJButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        rejectedJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectedJButtonActionPerformed(evt);
            }
        });
        add(rejectedJButton);
        rejectedJButton.setBounds(930, 500, 150, 40);
        add(jLabel2);
        jLabel2.setBounds(0, 0, 0, 0);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clg3 - Copy.jpg"))); // NOI18N
        add(jLabel3);
        jLabel3.setBounds(0, 0, 1918, 1022);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void approvedJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approvedJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select row from table");
            return;
        }

        StudentApprovalWorkRequest request = (StudentApprovalWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        EducationEventWorkRequest eduEventReq = request.getEventRequest();
        if(eduEventReq.getStudentList().size() < Integer.parseInt(eduEventReq.getInstructorRequired())){
            request.setStatus("Registered");
            UserAccount senderOfrequest = request.getSender();
            Employee senderEmp = senderOfrequest.getEmp();
            eduEventReq.getStudentList().add(senderEmp);
            senderOfrequest.getQueue().getWorkRequestList().add(eduEventReq);;
        }
        else{
            request.setStatus("Waitlisted");
            UserAccount senderOfrequest = request.getSender();
            Employee senderEmp = senderOfrequest.getEmp();
            eduEventReq.getStudentWaitList().add(senderEmp);
        }

        JOptionPane.showMessageDialog(null, "Approved!");

        populateTable();
        // TODO add your handling code here:
    }//GEN-LAST:event_approvedJButtonActionPerformed

    private void rejectedJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectedJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select row from table");
            return;
        }
        StudentApprovalWorkRequest request = (StudentApprovalWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setStatus("Rejected");
        JOptionPane.showMessageDialog(null, "Rejected!");
        populateTable();
    }//GEN-LAST:event_rejectedJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approvedJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton rejectedJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
